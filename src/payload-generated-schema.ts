/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  boolean,
  text,
  jsonb,
  numeric,
  serial,
  timestamp,
  type AnyPgColumn,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_pages_hero_links_link_type = pgEnum('enum_pages_hero_links_link_type', [
  'reference',
  'custom',
])
export const enum_pages_hero_links_link_appearance = pgEnum(
  'enum_pages_hero_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_cta_links_link_type = pgEnum(
  'enum_pages_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_cta_links_link_appearance = pgEnum(
  'enum_pages_blocks_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_content_columns_size = pgEnum(
  'enum_pages_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum_pages_blocks_content_columns_link_type = pgEnum(
  'enum_pages_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_content_columns_link_appearance = pgEnum(
  'enum_pages_blocks_content_columns_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_archive_populate_by = pgEnum(
  'enum_pages_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum_pages_blocks_archive_relation_to = pgEnum(
  'enum_pages_blocks_archive_relation_to',
  ['posts'],
)
export const enum_pages_hero_type = pgEnum('enum_pages_hero_type', [
  'none',
  'highImpact',
  'mediumImpact',
  'lowImpact',
])
export const enum_pages_status = pgEnum('enum_pages_status', ['draft', 'published'])
export const enum__pages_v_version_hero_links_link_type = pgEnum(
  'enum__pages_v_version_hero_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_version_hero_links_link_appearance = pgEnum(
  'enum__pages_v_version_hero_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_cta_links_link_type = pgEnum(
  'enum__pages_v_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_cta_links_link_appearance = pgEnum(
  'enum__pages_v_blocks_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_content_columns_size = pgEnum(
  'enum__pages_v_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum__pages_v_blocks_content_columns_link_type = pgEnum(
  'enum__pages_v_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_content_columns_link_appearance = pgEnum(
  'enum__pages_v_blocks_content_columns_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_archive_populate_by = pgEnum(
  'enum__pages_v_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum__pages_v_blocks_archive_relation_to = pgEnum(
  'enum__pages_v_blocks_archive_relation_to',
  ['posts'],
)
export const enum__pages_v_version_hero_type = pgEnum('enum__pages_v_version_hero_type', [
  'none',
  'highImpact',
  'mediumImpact',
  'lowImpact',
])
export const enum__pages_v_version_status = pgEnum('enum__pages_v_version_status', [
  'draft',
  'published',
])
export const enum_posts_status = pgEnum('enum_posts_status', ['draft', 'published'])
export const enum__posts_v_version_status = pgEnum('enum__posts_v_version_status', [
  'draft',
  'published',
])
export const enum_properties_info_comparable_sales_comparison = pgEnum(
  'enum_properties_info_comparable_sales_comparison',
  ['superior', 'similar', 'inferior'],
)
export const enum_properties_due_diligence_zone_data_type = pgEnum(
  'enum_properties_due_diligence_zone_data_type',
  [
    'easement',
    'flood',
    'bushfire',
    'transmission',
    'publicHousing',
    'trainLine',
    'renovations',
    'other',
  ],
)
export const enum_properties_due_diligence_zone_data_effected = pgEnum(
  'enum_properties_due_diligence_zone_data_effected',
  ['yes', 'no', 'partial'],
)
export const enum_properties_info_addr_state = pgEnum('enum_properties_info_addr_state', [
  'nsw',
  'vic',
  'qld',
  'wa',
  'sa',
  'tas',
  'act',
  'nt',
])
export const enum_properties_due_diligence_property_occupancy = pgEnum(
  'enum_properties_due_diligence_property_occupancy',
  ['vacant', 'tenanted', 'ownerOccupied'],
)
export const enum_properties_status = pgEnum('enum_properties_status', ['draft', 'published'])
export const enum__properties_v_version_info_comparable_sales_comparison = pgEnum(
  'enum__properties_v_version_info_comparable_sales_comparison',
  ['superior', 'similar', 'inferior'],
)
export const enum__properties_v_version_due_diligence_zone_data_type = pgEnum(
  'enum__properties_v_version_due_diligence_zone_data_type',
  [
    'easement',
    'flood',
    'bushfire',
    'transmission',
    'publicHousing',
    'trainLine',
    'renovations',
    'other',
  ],
)
export const enum__properties_v_version_due_diligence_zone_data_effected = pgEnum(
  'enum__properties_v_version_due_diligence_zone_data_effected',
  ['yes', 'no', 'partial'],
)
export const enum__properties_v_version_info_addr_state = pgEnum(
  'enum__properties_v_version_info_addr_state',
  ['nsw', 'vic', 'qld', 'wa', 'sa', 'tas', 'act', 'nt'],
)
export const enum__properties_v_version_due_diligence_property_occupancy = pgEnum(
  'enum__properties_v_version_due_diligence_property_occupancy',
  ['vacant', 'tenanted', 'ownerOccupied'],
)
export const enum__properties_v_version_status = pgEnum('enum__properties_v_version_status', [
  'draft',
  'published',
])
export const enum_regions_status = pgEnum('enum_regions_status', ['draft', 'published'])
export const enum__regions_v_version_status = pgEnum('enum__regions_v_version_status', [
  'draft',
  'published',
])
export const enum_suburbs_status = pgEnum('enum_suburbs_status', ['draft', 'published'])
export const enum__suburbs_v_version_status = pgEnum('enum__suburbs_v_version_status', [
  'draft',
  'published',
])
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom'])
export const enum_forms_confirmation_type = pgEnum('enum_forms_confirmation_type', [
  'message',
  'redirect',
])
export const enum_payload_jobs_log_task_slug = pgEnum('enum_payload_jobs_log_task_slug', [
  'inline',
  'schedulePublish',
])
export const enum_payload_jobs_log_state = pgEnum('enum_payload_jobs_log_state', [
  'failed',
  'succeeded',
])
export const enum_payload_jobs_task_slug = pgEnum('enum_payload_jobs_task_slug', [
  'inline',
  'schedulePublish',
])
export const enum_header_nav_items_link_type = pgEnum('enum_header_nav_items_link_type', [
  'reference',
  'custom',
])
export const enum_footer_nav_items_link_type = pgEnum('enum_footer_nav_items_link_type', [
  'reference',
  'custom',
])

export const pages_hero_links = pgTable(
  'pages_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_pages_hero_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta_links = pgTable(
  'pages_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_cta_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_cta.id],
      name: 'pages_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta = pgTable(
  'pages_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content_columns = pgTable(
  'pages_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    size: enum_pages_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum_pages_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_content_columns_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_content.id],
      name: 'pages_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content = pgTable(
  'pages_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_media_block = pgTable(
  'pages_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_media_block_path_idx').on(columns._path),
    pages_blocks_media_block_media_idx: index('pages_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_archive = pgTable(
  'pages_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum_pages_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum_pages_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_form_block = pgTable(
  'pages_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_form_block_path_idx').on(columns._path),
    pages_blocks_form_block_form_idx: index('pages_blocks_form_block_form_idx').on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    hero_type: enum_pages_hero_type('hero_type').default('lowImpact'),
    hero_richText: jsonb('hero_rich_text'),
    hero_media: integer('hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  (columns) => ({
    pages_hero_hero_media_idx: index('pages_hero_hero_media_idx').on(columns.hero_media),
    pages_meta_meta_image_idx: index('pages_meta_meta_image_idx').on(columns.meta_image),
    pages_slug_idx: index('pages_slug_idx').on(columns.slug),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
)

export const pages_rels = pgTable(
  'pages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('pages_rels_order_idx').on(columns.order),
    parentIdx: index('pages_rels_parent_idx').on(columns.parent),
    pathIdx: index('pages_rels_path_idx').on(columns.path),
    pages_rels_pages_id_idx: index('pages_rels_pages_id_idx').on(columns.pagesID),
    pages_rels_posts_id_idx: index('pages_rels_posts_id_idx').on(columns.postsID),
    pages_rels_categories_id_idx: index('pages_rels_categories_id_idx').on(columns.categoriesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages.id],
      name: 'pages_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'pages_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'pages_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'pages_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_version_hero_links = pgTable(
  '_pages_v_version_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_version_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_version_hero_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_version_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_version_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_version_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta_links = pgTable(
  '_pages_v_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_cta_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_cta.id],
      name: '_pages_v_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta = pgTable(
  '_pages_v_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    richText: jsonb('rich_text'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content_columns = pgTable(
  '_pages_v_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    size: enum__pages_v_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum__pages_v_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_content_columns_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_content.id],
      name: '_pages_v_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content = pgTable(
  '_pages_v_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_media_block = pgTable(
  '_pages_v_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_media_block_path_idx').on(columns._path),
    _pages_v_blocks_media_block_media_idx: index('_pages_v_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_archive = pgTable(
  '_pages_v_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum__pages_v_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum__pages_v_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_form_block = pgTable(
  '_pages_v_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_form_block_path_idx').on(columns._path),
    _pages_v_blocks_form_block_form_idx: index('_pages_v_blocks_form_block_form_idx').on(
      columns.form,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_hero_type: enum__pages_v_version_hero_type('version_hero_type').default('lowImpact'),
    version_hero_richText: jsonb('version_hero_rich_text'),
    version_hero_media: integer('version_hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_hero_version_hero_media_idx: index(
      '_pages_v_version_hero_version_hero_media_idx',
    ).on(columns.version_hero_media),
    _pages_v_version_meta_version_meta_image_idx: index(
      '_pages_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _pages_v_version_version_slug_idx: index('_pages_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _pages_v_version_version_updated_at_idx: index('_pages_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _pages_v_version_version_created_at_idx: index('_pages_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _pages_v_version_version__status_idx: index('_pages_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(columns.createdAt),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(columns.updatedAt),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
    _pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
  }),
)

export const _pages_v_rels = pgTable(
  '_pages_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('_pages_v_rels_order_idx').on(columns.order),
    parentIdx: index('_pages_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_pages_v_rels_path_idx').on(columns.path),
    _pages_v_rels_pages_id_idx: index('_pages_v_rels_pages_id_idx').on(columns.pagesID),
    _pages_v_rels_posts_id_idx: index('_pages_v_rels_posts_id_idx').on(columns.postsID),
    _pages_v_rels_categories_id_idx: index('_pages_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_pages_v_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_pages_v_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_pages_v_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const posts_populated_authors = pgTable(
  'posts_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('posts_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('posts_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const posts = pgTable(
  'posts',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    heroImage: integer('hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_posts_status('_status').default('draft'),
  },
  (columns) => ({
    posts_hero_image_idx: index('posts_hero_image_idx').on(columns.heroImage),
    posts_meta_meta_image_idx: index('posts_meta_meta_image_idx').on(columns.meta_image),
    posts_slug_idx: index('posts_slug_idx').on(columns.slug),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
    posts__status_idx: index('posts__status_idx').on(columns._status),
  }),
)

export const posts_rels = pgTable(
  'posts_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('posts_rels_order_idx').on(columns.order),
    parentIdx: index('posts_rels_parent_idx').on(columns.parent),
    pathIdx: index('posts_rels_path_idx').on(columns.path),
    posts_rels_posts_id_idx: index('posts_rels_posts_id_idx').on(columns.postsID),
    posts_rels_categories_id_idx: index('posts_rels_categories_id_idx').on(columns.categoriesID),
    posts_rels_users_id_idx: index('posts_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [posts.id],
      name: 'posts_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'posts_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'posts_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'posts_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v_version_populated_authors = pgTable(
  '_posts_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_posts_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_version_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v = pgTable(
  '_posts_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => posts.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_heroImage: integer('version_hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__posts_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _posts_v_parent_idx: index('_posts_v_parent_idx').on(columns.parent),
    _posts_v_version_version_hero_image_idx: index('_posts_v_version_version_hero_image_idx').on(
      columns.version_heroImage,
    ),
    _posts_v_version_meta_version_meta_image_idx: index(
      '_posts_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _posts_v_version_version_slug_idx: index('_posts_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _posts_v_version_version_updated_at_idx: index('_posts_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _posts_v_version_version_created_at_idx: index('_posts_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _posts_v_version_version__status_idx: index('_posts_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _posts_v_created_at_idx: index('_posts_v_created_at_idx').on(columns.createdAt),
    _posts_v_updated_at_idx: index('_posts_v_updated_at_idx').on(columns.updatedAt),
    _posts_v_latest_idx: index('_posts_v_latest_idx').on(columns.latest),
    _posts_v_autosave_idx: index('_posts_v_autosave_idx').on(columns.autosave),
  }),
)

export const _posts_v_rels = pgTable(
  '_posts_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('_posts_v_rels_order_idx').on(columns.order),
    parentIdx: index('_posts_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_posts_v_rels_path_idx').on(columns.path),
    _posts_v_rels_posts_id_idx: index('_posts_v_rels_posts_id_idx').on(columns.postsID),
    _posts_v_rels_categories_id_idx: index('_posts_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    _posts_v_rels_users_id_idx: index('_posts_v_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_posts_v_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_posts_v_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_posts_v_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    caption: jsonb('caption'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_square_url: varchar('sizes_square_url'),
    sizes_square_width: numeric('sizes_square_width'),
    sizes_square_height: numeric('sizes_square_height'),
    sizes_square_mimeType: varchar('sizes_square_mime_type'),
    sizes_square_filesize: numeric('sizes_square_filesize'),
    sizes_square_filename: varchar('sizes_square_filename'),
    sizes_small_url: varchar('sizes_small_url'),
    sizes_small_width: numeric('sizes_small_width'),
    sizes_small_height: numeric('sizes_small_height'),
    sizes_small_mimeType: varchar('sizes_small_mime_type'),
    sizes_small_filesize: numeric('sizes_small_filesize'),
    sizes_small_filename: varchar('sizes_small_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
    sizes_xlarge_url: varchar('sizes_xlarge_url'),
    sizes_xlarge_width: numeric('sizes_xlarge_width'),
    sizes_xlarge_height: numeric('sizes_xlarge_height'),
    sizes_xlarge_mimeType: varchar('sizes_xlarge_mime_type'),
    sizes_xlarge_filesize: numeric('sizes_xlarge_filesize'),
    sizes_xlarge_filename: varchar('sizes_xlarge_filename'),
    sizes_og_url: varchar('sizes_og_url'),
    sizes_og_width: numeric('sizes_og_width'),
    sizes_og_height: numeric('sizes_og_height'),
    sizes_og_mimeType: varchar('sizes_og_mime_type'),
    sizes_og_filesize: numeric('sizes_og_filesize'),
    sizes_og_filename: varchar('sizes_og_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_square_sizes_square_filename_idx: index(
      'media_sizes_square_sizes_square_filename_idx',
    ).on(columns.sizes_square_filename),
    media_sizes_small_sizes_small_filename_idx: index(
      'media_sizes_small_sizes_small_filename_idx',
    ).on(columns.sizes_small_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index(
      'media_sizes_large_sizes_large_filename_idx',
    ).on(columns.sizes_large_filename),
    media_sizes_xlarge_sizes_xlarge_filename_idx: index(
      'media_sizes_xlarge_sizes_xlarge_filename_idx',
    ).on(columns.sizes_xlarge_filename),
    media_sizes_og_sizes_og_filename_idx: index('media_sizes_og_sizes_og_filename_idx').on(
      columns.sizes_og_filename,
    ),
  }),
)

export const categories_breadcrumbs = pgTable(
  'categories_breadcrumbs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    doc: integer('doc_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    url: varchar('url'),
    label: varchar('label'),
  },
  (columns) => ({
    _orderIdx: index('categories_breadcrumbs_order_idx').on(columns._order),
    _parentIDIdx: index('categories_breadcrumbs_parent_id_idx').on(columns._parentID),
    categories_breadcrumbs_doc_idx: index('categories_breadcrumbs_doc_idx').on(columns.doc),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [categories.id],
      name: 'categories_breadcrumbs_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const categories = pgTable(
  'categories',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    parent: integer('parent_id').references((): AnyPgColumn => categories.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categories_slug_idx: index('categories_slug_idx').on(columns.slug),
    categories_parent_idx: index('categories_parent_idx').on(columns.parent),
    categories_updated_at_idx: index('categories_updated_at_idx').on(columns.updatedAt),
    categories_created_at_idx: index('categories_created_at_idx').on(columns.createdAt),
  }),
)

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const properties_info_agent_notes = pgTable(
  'properties_info_agent_notes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    agentName: varchar('agent_name'),
    agentNote: jsonb('agent_note'),
  },
  (columns) => ({
    _orderIdx: index('properties_info_agent_notes_order_idx').on(columns._order),
    _parentIDIdx: index('properties_info_agent_notes_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [properties.id],
      name: 'properties_info_agent_notes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const properties_info_sale_history = pgTable(
  'properties_info_sale_history',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    year: numeric('year'),
    value: numeric('value'),
  },
  (columns) => ({
    _orderIdx: index('properties_info_sale_history_order_idx').on(columns._order),
    _parentIDIdx: index('properties_info_sale_history_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [properties.id],
      name: 'properties_info_sale_history_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const properties_info_images = pgTable(
  'properties_info_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('properties_info_images_order_idx').on(columns._order),
    _parentIDIdx: index('properties_info_images_parent_id_idx').on(columns._parentID),
    properties_info_images_image_idx: index('properties_info_images_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [properties.id],
      name: 'properties_info_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const properties_info_comparable_sales = pgTable(
  'properties_info_comparable_sales',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    address: varchar('address'),
    salePrice: numeric('sale_price'),
    comparison: enum_properties_info_comparable_sales_comparison('comparison'),
    link: varchar('link'),
    heroImage: integer('hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('properties_info_comparable_sales_order_idx').on(columns._order),
    _parentIDIdx: index('properties_info_comparable_sales_parent_id_idx').on(columns._parentID),
    properties_info_comparable_sales_hero_image_idx: index(
      'properties_info_comparable_sales_hero_image_idx',
    ).on(columns.heroImage),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [properties.id],
      name: 'properties_info_comparable_sales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const properties_due_diligence_zone_data = pgTable(
  'properties_due_diligence_zone_data',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    type: enum_properties_due_diligence_zone_data_type('type'),
    effected: enum_properties_due_diligence_zone_data_effected('effected'),
    details: jsonb('details'),
    agentNotes: jsonb('agent_notes'),
    url: varchar('url'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('properties_due_diligence_zone_data_order_idx').on(columns._order),
    _parentIDIdx: index('properties_due_diligence_zone_data_parent_id_idx').on(columns._parentID),
    properties_due_diligence_zone_data_image_idx: index(
      'properties_due_diligence_zone_data_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [properties.id],
      name: 'properties_due_diligence_zone_data_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const properties = pgTable(
  'properties',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    info_heroImage: integer('info_hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    info_agentSummary: jsonb('info_agent_summary'),
    info_videoUrl: varchar('info_video_url'),
    info_purchasePrice: numeric('info_purchase_price'),
    info_askingPrice: numeric('info_asking_price'),
    info_addr_streetAddress: varchar('info_addr_street_address'),
    info_addr_suburbName: integer('info_addr_suburb_name_id').references(() => suburbs.id, {
      onDelete: 'set null',
    }),
    info_addr_region: integer('info_addr_region_id').references(() => regions.id, {
      onDelete: 'set null',
    }),
    info_addr_postcode: varchar('info_addr_postcode'),
    info_addr_state: enum_properties_info_addr_state('info_addr_state'),
    info_format_bedrooms: numeric('info_format_bedrooms'),
    info_format_bathrooms: numeric('info_format_bathrooms'),
    info_format_carSpaces: numeric('info_format_car_spaces'),
    info_internal: numeric('info_internal'),
    info_land: numeric('info_land'),
    info_buildYear: numeric('info_build_year'),
    dueDiligence_propertyOccupancy: enum_properties_due_diligence_property_occupancy(
      'due_diligence_property_occupancy',
    ),
    dueDiligence_leaseExpiryDate: timestamp('due_diligence_lease_expiry_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    dueDiligence_lastRentalIncrease: timestamp('due_diligence_last_rental_increase', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    dueDiligence_currentWeeklyRent: numeric('due_diligence_current_weekly_rent'),
    valProp_purchCost_purchasePriceDisp: varchar('val_prop_purch_cost_purchase_price_disp'),
    valProp_purchCost_loanTerm: numeric('val_prop_purch_cost_loan_term').default('30'),
    valProp_purchCost_interestRate: numeric('val_prop_purch_cost_interest_rate'),
    valProp_purchCost_depositCash: numeric('val_prop_purch_cost_deposit_cash'),
    valProp_purchCost_equityRelease: numeric('val_prop_purch_cost_equity_release'),
    valProp_purchCost_equityReleaseRate: numeric('val_prop_purch_cost_equity_release_rate'),
    valProp_purchCost_loanAmountDisp: varchar('val_prop_purch_cost_loan_amount_disp'),
    valProp_purchCost_depositTotalDisp: varchar('val_prop_purch_cost_deposit_total_disp'),
    valProp_purchCost_depositPctDisp: varchar('val_prop_purch_cost_deposit_pct_disp'),
    valProp_purchCost_stampDuty: numeric('val_prop_purch_cost_stamp_duty'),
    valProp_purchCost_renovationsCost: numeric('val_prop_purch_cost_renovations_cost'),
    valProp_purchCost_buildingAndPest: numeric('val_prop_purch_cost_building_and_pest'),
    valProp_purchCost_conveyancing: numeric('val_prop_purch_cost_conveyancing'),
    valProp_purchCost_bankFees: numeric('val_prop_purch_cost_bank_fees'),
    valProp_purchCost_lendersInsurance: numeric('val_prop_purch_cost_lenders_insurance'),
    valProp_purchCost_totalCostDisp: varchar('val_prop_purch_cost_total_cost_disp'),
    valProp_annualExp_councilRates: numeric('val_prop_annual_exp_council_rates'),
    valProp_annualExp_insuranceCosts: numeric('val_prop_annual_exp_insurance_costs'),
    valProp_annualExp_utilities: numeric('val_prop_annual_exp_utilities'),
    valProp_annualExp_repairsMaintenance: numeric('val_prop_annual_exp_repairs_maintenance'),
    valProp_annualExp_pmPercentage: numeric('val_prop_annual_exp_pm_percentage'),
    valProp_annualExp_pmFeesDisp: varchar('val_prop_annual_exp_pm_fees_disp'),
    valProp_annualExp_loanRepaymentsDisp: varchar('val_prop_annual_exp_loan_repayments_disp'),
    valProp_annualExp_totalExpensesDisp: varchar('val_prop_annual_exp_total_expenses_disp'),
    valProp_expResults_expectedRent: numeric('val_prop_exp_results_expected_rent'),
    valProp_expResults_depreciation: numeric('val_prop_exp_results_depreciation'),
    valProp_expResults_grossIncomeDisp: varchar('val_prop_exp_results_gross_income_disp'),
    valProp_expResults_grossYieldDisp: varchar('val_prop_exp_results_gross_yield_disp'),
    valProp_expResults_netIncomeDisp: varchar('val_prop_exp_results_net_income_disp'),
    valProp_expResults_netYieldDisp: varchar('val_prop_exp_results_net_yield_disp'),
    valProp_expResults_equity8Disp: varchar('val_prop_exp_results_equity8_disp'),
    valProp_expResults_equity10Disp: varchar('val_prop_exp_results_equity10_disp'),
    valProp_expResults_equity12Disp: varchar('val_prop_exp_results_equity12_disp'),
    valProp_expResults_equity16Disp: varchar('val_prop_exp_results_equity16_disp'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_properties_status('_status').default('draft'),
  },
  (columns) => ({
    properties_info_info_hero_image_idx: index('properties_info_info_hero_image_idx').on(
      columns.info_heroImage,
    ),
    properties_info_addr_info_addr_suburb_name_idx: index(
      'properties_info_addr_info_addr_suburb_name_idx',
    ).on(columns.info_addr_suburbName),
    properties_info_addr_info_addr_region_idx: index(
      'properties_info_addr_info_addr_region_idx',
    ).on(columns.info_addr_region),
    properties_meta_meta_image_idx: index('properties_meta_meta_image_idx').on(columns.meta_image),
    properties_updated_at_idx: index('properties_updated_at_idx').on(columns.updatedAt),
    properties_created_at_idx: index('properties_created_at_idx').on(columns.createdAt),
    properties__status_idx: index('properties__status_idx').on(columns._status),
  }),
)

export const properties_rels = pgTable(
  'properties_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'buyers-accessID': integer('buyers_access_id'),
  },
  (columns) => ({
    order: index('properties_rels_order_idx').on(columns.order),
    parentIdx: index('properties_rels_parent_idx').on(columns.parent),
    pathIdx: index('properties_rels_path_idx').on(columns.path),
    properties_rels_buyers_access_id_idx: index('properties_rels_buyers_access_id_idx').on(
      columns['buyers-accessID'],
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [properties.id],
      name: 'properties_rels_parent_fk',
    }).onDelete('cascade'),
    'buyers-accessIdFk': foreignKey({
      columns: [columns['buyers-accessID']],
      foreignColumns: [buyers_access.id],
      name: 'properties_rels_buyers_access_fk',
    }).onDelete('cascade'),
  }),
)

export const _properties_v_version_info_agent_notes = pgTable(
  '_properties_v_version_info_agent_notes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    agentName: varchar('agent_name'),
    agentNote: jsonb('agent_note'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_properties_v_version_info_agent_notes_order_idx').on(columns._order),
    _parentIDIdx: index('_properties_v_version_info_agent_notes_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_properties_v.id],
      name: '_properties_v_version_info_agent_notes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _properties_v_version_info_sale_history = pgTable(
  '_properties_v_version_info_sale_history',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    year: numeric('year'),
    value: numeric('value'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_properties_v_version_info_sale_history_order_idx').on(columns._order),
    _parentIDIdx: index('_properties_v_version_info_sale_history_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_properties_v.id],
      name: '_properties_v_version_info_sale_history_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _properties_v_version_info_images = pgTable(
  '_properties_v_version_info_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_properties_v_version_info_images_order_idx').on(columns._order),
    _parentIDIdx: index('_properties_v_version_info_images_parent_id_idx').on(columns._parentID),
    _properties_v_version_info_images_image_idx: index(
      '_properties_v_version_info_images_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_properties_v.id],
      name: '_properties_v_version_info_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _properties_v_version_info_comparable_sales = pgTable(
  '_properties_v_version_info_comparable_sales',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    address: varchar('address'),
    salePrice: numeric('sale_price'),
    comparison: enum__properties_v_version_info_comparable_sales_comparison('comparison'),
    link: varchar('link'),
    heroImage: integer('hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_properties_v_version_info_comparable_sales_order_idx').on(columns._order),
    _parentIDIdx: index('_properties_v_version_info_comparable_sales_parent_id_idx').on(
      columns._parentID,
    ),
    _properties_v_version_info_comparable_sales_hero_image_idx: index(
      '_properties_v_version_info_comparable_sales_hero_image_idx',
    ).on(columns.heroImage),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_properties_v.id],
      name: '_properties_v_version_info_comparable_sales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _properties_v_version_due_diligence_zone_data = pgTable(
  '_properties_v_version_due_diligence_zone_data',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    type: enum__properties_v_version_due_diligence_zone_data_type('type'),
    effected: enum__properties_v_version_due_diligence_zone_data_effected('effected'),
    details: jsonb('details'),
    agentNotes: jsonb('agent_notes'),
    url: varchar('url'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_properties_v_version_due_diligence_zone_data_order_idx').on(columns._order),
    _parentIDIdx: index('_properties_v_version_due_diligence_zone_data_parent_id_idx').on(
      columns._parentID,
    ),
    _properties_v_version_due_diligence_zone_data_image_idx: index(
      '_properties_v_version_due_diligence_zone_data_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_properties_v.id],
      name: '_properties_v_version_due_diligence_zone_data_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _properties_v = pgTable(
  '_properties_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => properties.id, {
      onDelete: 'set null',
    }),
    version_name: varchar('version_name'),
    version_info_heroImage: integer('version_info_hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_info_agentSummary: jsonb('version_info_agent_summary'),
    version_info_videoUrl: varchar('version_info_video_url'),
    version_info_purchasePrice: numeric('version_info_purchase_price'),
    version_info_askingPrice: numeric('version_info_asking_price'),
    version_info_addr_streetAddress: varchar('version_info_addr_street_address'),
    version_info_addr_suburbName: integer('version_info_addr_suburb_name_id').references(
      () => suburbs.id,
      {
        onDelete: 'set null',
      },
    ),
    version_info_addr_region: integer('version_info_addr_region_id').references(() => regions.id, {
      onDelete: 'set null',
    }),
    version_info_addr_postcode: varchar('version_info_addr_postcode'),
    version_info_addr_state: enum__properties_v_version_info_addr_state('version_info_addr_state'),
    version_info_format_bedrooms: numeric('version_info_format_bedrooms'),
    version_info_format_bathrooms: numeric('version_info_format_bathrooms'),
    version_info_format_carSpaces: numeric('version_info_format_car_spaces'),
    version_info_internal: numeric('version_info_internal'),
    version_info_land: numeric('version_info_land'),
    version_info_buildYear: numeric('version_info_build_year'),
    version_dueDiligence_propertyOccupancy:
      enum__properties_v_version_due_diligence_property_occupancy(
        'version_due_diligence_property_occupancy',
      ),
    version_dueDiligence_leaseExpiryDate: timestamp('version_due_diligence_lease_expiry_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_dueDiligence_lastRentalIncrease: timestamp(
      'version_due_diligence_last_rental_increase',
      { mode: 'string', withTimezone: true, precision: 3 },
    ),
    version_dueDiligence_currentWeeklyRent: numeric('version_due_diligence_current_weekly_rent'),
    version_valProp_purchCost_purchasePriceDisp: varchar(
      'version_val_prop_purch_cost_purchase_price_disp',
    ),
    version_valProp_purchCost_loanTerm: numeric('version_val_prop_purch_cost_loan_term').default(
      '30',
    ),
    version_valProp_purchCost_interestRate: numeric('version_val_prop_purch_cost_interest_rate'),
    version_valProp_purchCost_depositCash: numeric('version_val_prop_purch_cost_deposit_cash'),
    version_valProp_purchCost_equityRelease: numeric('version_val_prop_purch_cost_equity_release'),
    version_valProp_purchCost_equityReleaseRate: numeric(
      'version_val_prop_purch_cost_equity_release_rate',
    ),
    version_valProp_purchCost_loanAmountDisp: varchar(
      'version_val_prop_purch_cost_loan_amount_disp',
    ),
    version_valProp_purchCost_depositTotalDisp: varchar(
      'version_val_prop_purch_cost_deposit_total_disp',
    ),
    version_valProp_purchCost_depositPctDisp: varchar(
      'version_val_prop_purch_cost_deposit_pct_disp',
    ),
    version_valProp_purchCost_stampDuty: numeric('version_val_prop_purch_cost_stamp_duty'),
    version_valProp_purchCost_renovationsCost: numeric(
      'version_val_prop_purch_cost_renovations_cost',
    ),
    version_valProp_purchCost_buildingAndPest: numeric(
      'version_val_prop_purch_cost_building_and_pest',
    ),
    version_valProp_purchCost_conveyancing: numeric('version_val_prop_purch_cost_conveyancing'),
    version_valProp_purchCost_bankFees: numeric('version_val_prop_purch_cost_bank_fees'),
    version_valProp_purchCost_lendersInsurance: numeric(
      'version_val_prop_purch_cost_lenders_insurance',
    ),
    version_valProp_purchCost_totalCostDisp: varchar('version_val_prop_purch_cost_total_cost_disp'),
    version_valProp_annualExp_councilRates: numeric('version_val_prop_annual_exp_council_rates'),
    version_valProp_annualExp_insuranceCosts: numeric(
      'version_val_prop_annual_exp_insurance_costs',
    ),
    version_valProp_annualExp_utilities: numeric('version_val_prop_annual_exp_utilities'),
    version_valProp_annualExp_repairsMaintenance: numeric(
      'version_val_prop_annual_exp_repairs_maintenance',
    ),
    version_valProp_annualExp_pmPercentage: numeric('version_val_prop_annual_exp_pm_percentage'),
    version_valProp_annualExp_pmFeesDisp: varchar('version_val_prop_annual_exp_pm_fees_disp'),
    version_valProp_annualExp_loanRepaymentsDisp: varchar(
      'version_val_prop_annual_exp_loan_repayments_disp',
    ),
    version_valProp_annualExp_totalExpensesDisp: varchar(
      'version_val_prop_annual_exp_total_expenses_disp',
    ),
    version_valProp_expResults_expectedRent: numeric('version_val_prop_exp_results_expected_rent'),
    version_valProp_expResults_depreciation: numeric('version_val_prop_exp_results_depreciation'),
    version_valProp_expResults_grossIncomeDisp: varchar(
      'version_val_prop_exp_results_gross_income_disp',
    ),
    version_valProp_expResults_grossYieldDisp: varchar(
      'version_val_prop_exp_results_gross_yield_disp',
    ),
    version_valProp_expResults_netIncomeDisp: varchar(
      'version_val_prop_exp_results_net_income_disp',
    ),
    version_valProp_expResults_netYieldDisp: varchar('version_val_prop_exp_results_net_yield_disp'),
    version_valProp_expResults_equity8Disp: varchar('version_val_prop_exp_results_equity8_disp'),
    version_valProp_expResults_equity10Disp: varchar('version_val_prop_exp_results_equity10_disp'),
    version_valProp_expResults_equity12Disp: varchar('version_val_prop_exp_results_equity12_disp'),
    version_valProp_expResults_equity16Disp: varchar('version_val_prop_exp_results_equity16_disp'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__properties_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _properties_v_parent_idx: index('_properties_v_parent_idx').on(columns.parent),
    _properties_v_version_info_version_info_hero_image_idx: index(
      '_properties_v_version_info_version_info_hero_image_idx',
    ).on(columns.version_info_heroImage),
    _properties_v_version_info_addr_version_info_addr_suburb_idx: index(
      '_properties_v_version_info_addr_version_info_addr_suburb_idx',
    ).on(columns.version_info_addr_suburbName),
    _properties_v_version_info_addr_version_info_addr_region_idx: index(
      '_properties_v_version_info_addr_version_info_addr_region_idx',
    ).on(columns.version_info_addr_region),
    _properties_v_version_meta_version_meta_image_idx: index(
      '_properties_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _properties_v_version_version_updated_at_idx: index(
      '_properties_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _properties_v_version_version_created_at_idx: index(
      '_properties_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _properties_v_version_version__status_idx: index(
      '_properties_v_version_version__status_idx',
    ).on(columns.version__status),
    _properties_v_created_at_idx: index('_properties_v_created_at_idx').on(columns.createdAt),
    _properties_v_updated_at_idx: index('_properties_v_updated_at_idx').on(columns.updatedAt),
    _properties_v_latest_idx: index('_properties_v_latest_idx').on(columns.latest),
    _properties_v_autosave_idx: index('_properties_v_autosave_idx').on(columns.autosave),
  }),
)

export const _properties_v_rels = pgTable(
  '_properties_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'buyers-accessID': integer('buyers_access_id'),
  },
  (columns) => ({
    order: index('_properties_v_rels_order_idx').on(columns.order),
    parentIdx: index('_properties_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_properties_v_rels_path_idx').on(columns.path),
    _properties_v_rels_buyers_access_id_idx: index('_properties_v_rels_buyers_access_id_idx').on(
      columns['buyers-accessID'],
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_properties_v.id],
      name: '_properties_v_rels_parent_fk',
    }).onDelete('cascade'),
    'buyers-accessIdFk': foreignKey({
      columns: [columns['buyers-accessID']],
      foreignColumns: [buyers_access.id],
      name: '_properties_v_rels_buyers_access_fk',
    }).onDelete('cascade'),
  }),
)

export const regions_community_economic_landscape = pgTable(
  'regions_community_economic_landscape',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    url: varchar('url'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    icon: integer('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    description: jsonb('description'),
  },
  (columns) => ({
    _orderIdx: index('regions_community_economic_landscape_order_idx').on(columns._order),
    _parentIDIdx: index('regions_community_economic_landscape_parent_id_idx').on(columns._parentID),
    regions_community_economic_landscape_image_idx: index(
      'regions_community_economic_landscape_image_idx',
    ).on(columns.image),
    regions_community_economic_landscape_icon_idx: index(
      'regions_community_economic_landscape_icon_idx',
    ).on(columns.icon),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [regions.id],
      name: 'regions_community_economic_landscape_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const regions_infrastructure_future_development = pgTable(
  'regions_infrastructure_future_development',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    url: varchar('url'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    icon: integer('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    description: jsonb('description'),
  },
  (columns) => ({
    _orderIdx: index('regions_infrastructure_future_development_order_idx').on(columns._order),
    _parentIDIdx: index('regions_infrastructure_future_development_parent_id_idx').on(
      columns._parentID,
    ),
    regions_infrastructure_future_development_image_idx: index(
      'regions_infrastructure_future_development_image_idx',
    ).on(columns.image),
    regions_infrastructure_future_development_icon_idx: index(
      'regions_infrastructure_future_development_icon_idx',
    ).on(columns.icon),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [regions.id],
      name: 'regions_infrastructure_future_development_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const regions = pgTable(
  'regions',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    heroImage: integer('hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    description: jsonb('description'),
    video: varchar('video'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_regions_status('_status').default('draft'),
  },
  (columns) => ({
    regions_hero_image_idx: index('regions_hero_image_idx').on(columns.heroImage),
    regions_updated_at_idx: index('regions_updated_at_idx').on(columns.updatedAt),
    regions_created_at_idx: index('regions_created_at_idx').on(columns.createdAt),
    regions__status_idx: index('regions__status_idx').on(columns._status),
  }),
)

export const _regions_v_version_community_economic_landscape = pgTable(
  '_regions_v_version_community_economic_landscape',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    url: varchar('url'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    icon: integer('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    description: jsonb('description'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_regions_v_version_community_economic_landscape_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_regions_v_version_community_economic_landscape_parent_id_idx').on(
      columns._parentID,
    ),
    _regions_v_version_community_economic_landscape_image_idx: index(
      '_regions_v_version_community_economic_landscape_image_idx',
    ).on(columns.image),
    _regions_v_version_community_economic_landscape_icon_idx: index(
      '_regions_v_version_community_economic_landscape_icon_idx',
    ).on(columns.icon),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_regions_v.id],
      name: '_regions_v_version_community_economic_landscape_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _regions_v_version_infrastructure_future_development = pgTable(
  '_regions_v_version_infrastructure_future_development',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    url: varchar('url'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    icon: integer('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    description: jsonb('description'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_regions_v_version_infrastructure_future_development_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_regions_v_version_infrastructure_future_development_parent_id_idx').on(
      columns._parentID,
    ),
    _regions_v_version_infrastructure_future_development_ima_idx: index(
      '_regions_v_version_infrastructure_future_development_ima_idx',
    ).on(columns.image),
    _regions_v_version_infrastructure_future_development_ico_idx: index(
      '_regions_v_version_infrastructure_future_development_ico_idx',
    ).on(columns.icon),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_regions_v.id],
      name: '_regions_v_version_infrastructure_future_development_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _regions_v = pgTable(
  '_regions_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => regions.id, {
      onDelete: 'set null',
    }),
    version_name: varchar('version_name'),
    version_heroImage: integer('version_hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_description: jsonb('version_description'),
    version_video: varchar('version_video'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__regions_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _regions_v_parent_idx: index('_regions_v_parent_idx').on(columns.parent),
    _regions_v_version_version_hero_image_idx: index(
      '_regions_v_version_version_hero_image_idx',
    ).on(columns.version_heroImage),
    _regions_v_version_version_updated_at_idx: index(
      '_regions_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _regions_v_version_version_created_at_idx: index(
      '_regions_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _regions_v_version_version__status_idx: index('_regions_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _regions_v_created_at_idx: index('_regions_v_created_at_idx').on(columns.createdAt),
    _regions_v_updated_at_idx: index('_regions_v_updated_at_idx').on(columns.updatedAt),
    _regions_v_latest_idx: index('_regions_v_latest_idx').on(columns.latest),
    _regions_v_autosave_idx: index('_regions_v_autosave_idx').on(columns.autosave),
  }),
)

export const suburbs_median_value_by_year = pgTable(
  'suburbs_median_value_by_year',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    year: numeric('year'),
    medianValue: numeric('median_value'),
  },
  (columns) => ({
    _orderIdx: index('suburbs_median_value_by_year_order_idx').on(columns._order),
    _parentIDIdx: index('suburbs_median_value_by_year_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [suburbs.id],
      name: 'suburbs_median_value_by_year_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const suburbs = pgTable(
  'suburbs',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    region: integer('region_id').references(() => regions.id, {
      onDelete: 'set null',
    }),
    vacancyRate: numeric('vacancy_rate'),
    heroImage: integer('hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    description: jsonb('description'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_suburbs_status('_status').default('draft'),
  },
  (columns) => ({
    suburbs_region_idx: index('suburbs_region_idx').on(columns.region),
    suburbs_hero_image_idx: index('suburbs_hero_image_idx').on(columns.heroImage),
    suburbs_updated_at_idx: index('suburbs_updated_at_idx').on(columns.updatedAt),
    suburbs_created_at_idx: index('suburbs_created_at_idx').on(columns.createdAt),
    suburbs__status_idx: index('suburbs__status_idx').on(columns._status),
  }),
)

export const _suburbs_v_version_median_value_by_year = pgTable(
  '_suburbs_v_version_median_value_by_year',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    year: numeric('year'),
    medianValue: numeric('median_value'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_suburbs_v_version_median_value_by_year_order_idx').on(columns._order),
    _parentIDIdx: index('_suburbs_v_version_median_value_by_year_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_suburbs_v.id],
      name: '_suburbs_v_version_median_value_by_year_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _suburbs_v = pgTable(
  '_suburbs_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => suburbs.id, {
      onDelete: 'set null',
    }),
    version_name: varchar('version_name'),
    version_region: integer('version_region_id').references(() => regions.id, {
      onDelete: 'set null',
    }),
    version_vacancyRate: numeric('version_vacancy_rate'),
    version_heroImage: integer('version_hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_description: jsonb('version_description'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__suburbs_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _suburbs_v_parent_idx: index('_suburbs_v_parent_idx').on(columns.parent),
    _suburbs_v_version_version_region_idx: index('_suburbs_v_version_version_region_idx').on(
      columns.version_region,
    ),
    _suburbs_v_version_version_hero_image_idx: index(
      '_suburbs_v_version_version_hero_image_idx',
    ).on(columns.version_heroImage),
    _suburbs_v_version_version_updated_at_idx: index(
      '_suburbs_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _suburbs_v_version_version_created_at_idx: index(
      '_suburbs_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _suburbs_v_version_version__status_idx: index('_suburbs_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _suburbs_v_created_at_idx: index('_suburbs_v_created_at_idx').on(columns.createdAt),
    _suburbs_v_updated_at_idx: index('_suburbs_v_updated_at_idx').on(columns.updatedAt),
    _suburbs_v_latest_idx: index('_suburbs_v_latest_idx').on(columns.latest),
    _suburbs_v_autosave_idx: index('_suburbs_v_autosave_idx').on(columns.autosave),
  }),
)

export const access_token = pgTable(
  'access_token',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    enableAPIKey: boolean('enable_a_p_i_key'),
    apiKey: varchar('api_key'),
    apiKeyIndex: varchar('api_key_index'),
  },
  (columns) => ({
    access_token_updated_at_idx: index('access_token_updated_at_idx').on(columns.updatedAt),
    access_token_created_at_idx: index('access_token_created_at_idx').on(columns.createdAt),
  }),
)

export const buyers_access_sessions = pgTable(
  'buyers_access_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('buyers_access_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('buyers_access_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [buyers_access.id],
      name: 'buyers_access_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const buyers_access = pgTable(
  'buyers_access',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    buyers_access_updated_at_idx: index('buyers_access_updated_at_idx').on(columns.updatedAt),
    buyers_access_created_at_idx: index('buyers_access_created_at_idx').on(columns.createdAt),
    buyers_access_email_idx: uniqueIndex('buyers_access_email_idx').on(columns.email),
  }),
)

export const buyers_access_rels = pgTable(
  'buyers_access_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    propertiesID: integer('properties_id'),
  },
  (columns) => ({
    order: index('buyers_access_rels_order_idx').on(columns.order),
    parentIdx: index('buyers_access_rels_parent_idx').on(columns.parent),
    pathIdx: index('buyers_access_rels_path_idx').on(columns.path),
    buyers_access_rels_properties_id_idx: index('buyers_access_rels_properties_id_idx').on(
      columns.propertiesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [buyers_access.id],
      name: 'buyers_access_rels_parent_fk',
    }).onDelete('cascade'),
    propertiesIdFk: foreignKey({
      columns: [columns['propertiesID']],
      foreignColumns: [properties.id],
      name: 'buyers_access_rels_properties_fk',
    }).onDelete('cascade'),
  }),
)

export const redirects = pgTable(
  'redirects',
  {
    id: serial('id').primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: uniqueIndex('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
    redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
  }),
)

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_pages_id_idx: index('redirects_rels_pages_id_idx').on(columns.pagesID),
    redirects_rels_posts_id_idx: index('redirects_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'redirects_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'redirects_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_checkbox = pgTable(
  'forms_blocks_checkbox',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    defaultValue: boolean('default_value'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_checkbox_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_checkbox_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_checkbox_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_checkbox_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_country = pgTable(
  'forms_blocks_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_country_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_country_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_country_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_country_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_email = pgTable(
  'forms_blocks_email',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_email_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_email_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_email_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_email_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_message = pgTable(
  'forms_blocks_message',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    message: jsonb('message'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_message_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_message_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_message_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_message_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_number = pgTable(
  'forms_blocks_number',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: numeric('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_number_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_number_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_number_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_number_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select_options = pgTable(
  'forms_blocks_select_options',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_options_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select.id],
      name: 'forms_blocks_select_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select = pgTable(
  'forms_blocks_select',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    placeholder: varchar('placeholder'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_select_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_select_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_state = pgTable(
  'forms_blocks_state',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_state_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_state_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_state_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_state_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_text = pgTable(
  'forms_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_text_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_textarea = pgTable(
  'forms_blocks_textarea',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_textarea_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_textarea_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_textarea_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_textarea_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_emails = pgTable(
  'forms_emails',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    emailTo: varchar('email_to'),
    cc: varchar('cc'),
    bcc: varchar('bcc'),
    replyTo: varchar('reply_to'),
    emailFrom: varchar('email_from'),
    subject: varchar('subject').notNull().default("You've received a new message."),
    message: jsonb('message'),
  },
  (columns) => ({
    _orderIdx: index('forms_emails_order_idx').on(columns._order),
    _parentIDIdx: index('forms_emails_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_emails_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms = pgTable(
  'forms',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    submitButtonLabel: varchar('submit_button_label'),
    confirmationType: enum_forms_confirmation_type('confirmation_type').default('message'),
    confirmationMessage: jsonb('confirmation_message'),
    redirect_url: varchar('redirect_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    forms_updated_at_idx: index('forms_updated_at_idx').on(columns.updatedAt),
    forms_created_at_idx: index('forms_created_at_idx').on(columns.createdAt),
  }),
)

export const form_submissions_submission_data = pgTable(
  'form_submissions_submission_data',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    field: varchar('field').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('form_submissions_submission_data_order_idx').on(columns._order),
    _parentIDIdx: index('form_submissions_submission_data_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [form_submissions.id],
      name: 'form_submissions_submission_data_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const form_submissions = pgTable(
  'form_submissions',
  {
    id: serial('id').primaryKey(),
    form: integer('form_id')
      .notNull()
      .references(() => forms.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_form_idx: index('form_submissions_form_idx').on(columns.form),
    form_submissions_updated_at_idx: index('form_submissions_updated_at_idx').on(columns.updatedAt),
    form_submissions_created_at_idx: index('form_submissions_created_at_idx').on(columns.createdAt),
  }),
)

export const search_categories = pgTable(
  'search_categories',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    relationTo: varchar('relation_to'),
    categoryID: varchar('category_i_d'),
    title: varchar('title'),
  },
  (columns) => ({
    _orderIdx: index('search_categories_order_idx').on(columns._order),
    _parentIDIdx: index('search_categories_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_categories_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search = pgTable(
  'search',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    priority: numeric('priority'),
    slug: varchar('slug'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_slug_idx: index('search_slug_idx').on(columns.slug),
    search_meta_meta_image_idx: index('search_meta_meta_image_idx').on(columns.meta_image),
    search_updated_at_idx: index('search_updated_at_idx').on(columns.updatedAt),
    search_created_at_idx: index('search_created_at_idx').on(columns.createdAt),
  }),
)

export const search_rels = pgTable(
  'search_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('search_rels_order_idx').on(columns.order),
    parentIdx: index('search_rels_parent_idx').on(columns.parent),
    pathIdx: index('search_rels_path_idx').on(columns.path),
    search_rels_posts_id_idx: index('search_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [search.id],
      name: 'search_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'search_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs_log = pgTable(
  'payload_jobs_log',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    executedAt: timestamp('executed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    completedAt: timestamp('completed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    taskSlug: enum_payload_jobs_log_task_slug('task_slug').notNull(),
    taskID: varchar('task_i_d').notNull(),
    input: jsonb('input'),
    output: jsonb('output'),
    state: enum_payload_jobs_log_state('state').notNull(),
    error: jsonb('error'),
  },
  (columns) => ({
    _orderIdx: index('payload_jobs_log_order_idx').on(columns._order),
    _parentIDIdx: index('payload_jobs_log_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_jobs_log_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs = pgTable(
  'payload_jobs',
  {
    id: serial('id').primaryKey(),
    input: jsonb('input'),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    totalTried: numeric('total_tried').default('0'),
    hasError: boolean('has_error').default(false),
    error: jsonb('error'),
    taskSlug: enum_payload_jobs_task_slug('task_slug'),
    queue: varchar('queue').default('default'),
    waitUntil: timestamp('wait_until', { mode: 'string', withTimezone: true, precision: 3 }),
    processing: boolean('processing').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_jobs_completed_at_idx: index('payload_jobs_completed_at_idx').on(columns.completedAt),
    payload_jobs_total_tried_idx: index('payload_jobs_total_tried_idx').on(columns.totalTried),
    payload_jobs_has_error_idx: index('payload_jobs_has_error_idx').on(columns.hasError),
    payload_jobs_task_slug_idx: index('payload_jobs_task_slug_idx').on(columns.taskSlug),
    payload_jobs_queue_idx: index('payload_jobs_queue_idx').on(columns.queue),
    payload_jobs_wait_until_idx: index('payload_jobs_wait_until_idx').on(columns.waitUntil),
    payload_jobs_processing_idx: index('payload_jobs_processing_idx').on(columns.processing),
    payload_jobs_updated_at_idx: index('payload_jobs_updated_at_idx').on(columns.updatedAt),
    payload_jobs_created_at_idx: index('payload_jobs_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    mediaID: integer('media_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
    propertiesID: integer('properties_id'),
    regionsID: integer('regions_id'),
    suburbsID: integer('suburbs_id'),
    'access-tokenID': integer('access_token_id'),
    'buyers-accessID': integer('buyers_access_id'),
    redirectsID: integer('redirects_id'),
    formsID: integer('forms_id'),
    'form-submissionsID': integer('form_submissions_id'),
    searchID: integer('search_id'),
    'payload-jobsID': integer('payload_jobs_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_categories_id_idx: index(
      'payload_locked_documents_rels_categories_id_idx',
    ).on(columns.categoriesID),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_properties_id_idx: index(
      'payload_locked_documents_rels_properties_id_idx',
    ).on(columns.propertiesID),
    payload_locked_documents_rels_regions_id_idx: index(
      'payload_locked_documents_rels_regions_id_idx',
    ).on(columns.regionsID),
    payload_locked_documents_rels_suburbs_id_idx: index(
      'payload_locked_documents_rels_suburbs_id_idx',
    ).on(columns.suburbsID),
    payload_locked_documents_rels_access_token_id_idx: index(
      'payload_locked_documents_rels_access_token_id_idx',
    ).on(columns['access-tokenID']),
    payload_locked_documents_rels_buyers_access_id_idx: index(
      'payload_locked_documents_rels_buyers_access_id_idx',
    ).on(columns['buyers-accessID']),
    payload_locked_documents_rels_redirects_id_idx: index(
      'payload_locked_documents_rels_redirects_id_idx',
    ).on(columns.redirectsID),
    payload_locked_documents_rels_forms_id_idx: index(
      'payload_locked_documents_rels_forms_id_idx',
    ).on(columns.formsID),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      'payload_locked_documents_rels_form_submissions_id_idx',
    ).on(columns['form-submissionsID']),
    payload_locked_documents_rels_search_id_idx: index(
      'payload_locked_documents_rels_search_id_idx',
    ).on(columns.searchID),
    payload_locked_documents_rels_payload_jobs_id_idx: index(
      'payload_locked_documents_rels_payload_jobs_id_idx',
    ).on(columns['payload-jobsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    propertiesIdFk: foreignKey({
      columns: [columns['propertiesID']],
      foreignColumns: [properties.id],
      name: 'payload_locked_documents_rels_properties_fk',
    }).onDelete('cascade'),
    regionsIdFk: foreignKey({
      columns: [columns['regionsID']],
      foreignColumns: [regions.id],
      name: 'payload_locked_documents_rels_regions_fk',
    }).onDelete('cascade'),
    suburbsIdFk: foreignKey({
      columns: [columns['suburbsID']],
      foreignColumns: [suburbs.id],
      name: 'payload_locked_documents_rels_suburbs_fk',
    }).onDelete('cascade'),
    'access-tokenIdFk': foreignKey({
      columns: [columns['access-tokenID']],
      foreignColumns: [access_token.id],
      name: 'payload_locked_documents_rels_access_token_fk',
    }).onDelete('cascade'),
    'buyers-accessIdFk': foreignKey({
      columns: [columns['buyers-accessID']],
      foreignColumns: [buyers_access.id],
      name: 'payload_locked_documents_rels_buyers_access_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
    formsIdFk: foreignKey({
      columns: [columns['formsID']],
      foreignColumns: [forms.id],
      name: 'payload_locked_documents_rels_forms_fk',
    }).onDelete('cascade'),
    'form-submissionsIdFk': foreignKey({
      columns: [columns['form-submissionsID']],
      foreignColumns: [form_submissions.id],
      name: 'payload_locked_documents_rels_form_submissions_fk',
    }).onDelete('cascade'),
    searchIdFk: foreignKey({
      columns: [columns['searchID']],
      foreignColumns: [search.id],
      name: 'payload_locked_documents_rels_search_fk',
    }).onDelete('cascade'),
    'payload-jobsIdFk': foreignKey({
      columns: [columns['payload-jobsID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_locked_documents_rels_payload_jobs_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    'access-tokenID': integer('access_token_id'),
    'buyers-accessID': integer('buyers_access_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    payload_preferences_rels_access_token_id_idx: index(
      'payload_preferences_rels_access_token_id_idx',
    ).on(columns['access-tokenID']),
    payload_preferences_rels_buyers_access_id_idx: index(
      'payload_preferences_rels_buyers_access_id_idx',
    ).on(columns['buyers-accessID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
    'access-tokenIdFk': foreignKey({
      columns: [columns['access-tokenID']],
      foreignColumns: [access_token.id],
      name: 'payload_preferences_rels_access_token_fk',
    }).onDelete('cascade'),
    'buyers-accessIdFk': foreignKey({
      columns: [columns['buyers-accessID']],
      foreignColumns: [buyers_access.id],
      name: 'payload_preferences_rels_buyers_access_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const header_nav_items = pgTable(
  'header_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_header_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('header_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('header_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header = pgTable('header', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const header_rels = pgTable(
  'header_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('header_rels_order_idx').on(columns.order),
    parentIdx: index('header_rels_parent_idx').on(columns.parent),
    pathIdx: index('header_rels_path_idx').on(columns.path),
    header_rels_pages_id_idx: index('header_rels_pages_id_idx').on(columns.pagesID),
    header_rels_posts_id_idx: index('header_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [header.id],
      name: 'header_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'header_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'header_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_nav_items = pgTable(
  'footer_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_footer_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer = pgTable('footer', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const footer_rels = pgTable(
  'footer_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('footer_rels_order_idx').on(columns.order),
    parentIdx: index('footer_rels_parent_idx').on(columns.parent),
    pathIdx: index('footer_rels_path_idx').on(columns.path),
    footer_rels_pages_id_idx: index('footer_rels_pages_id_idx').on(columns.pagesID),
    footer_rels_posts_id_idx: index('footer_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer.id],
      name: 'footer_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'footer_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'footer_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const company_settings_social_media = pgTable(
  'company_settings_social_media',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    platform: varchar('platform').notNull(),
    url: varchar('url').notNull(),
    icon: integer('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('company_settings_social_media_order_idx').on(columns._order),
    _parentIDIdx: index('company_settings_social_media_parent_id_idx').on(columns._parentID),
    company_settings_social_media_icon_idx: index('company_settings_social_media_icon_idx').on(
      columns.icon,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [company_settings.id],
      name: 'company_settings_social_media_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const company_settings_brand_colours = pgTable(
  'company_settings_brand_colours',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    colorName: varchar('color_name').notNull(),
    colorValue: varchar('color_value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('company_settings_brand_colours_order_idx').on(columns._order),
    _parentIDIdx: index('company_settings_brand_colours_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [company_settings.id],
      name: 'company_settings_brand_colours_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const company_settings = pgTable(
  'company_settings',
  {
    id: serial('id').primaryKey(),
    companyName: varchar('company_name').notNull(),
    motto: varchar('motto'),
    description: jsonb('description'),
    disclaimer: varchar('disclaimer'),
    logo: integer('logo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    logoDarkmode: integer('logo_darkmode_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    corporateVideo: varchar('corporate_video'),
    favicon: integer('favicon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    faviconDarkmode: integer('favicon_darkmode_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    phone: varchar('phone'),
    email: varchar('email'),
    address: varchar('address'),
    abn: varchar('abn'),
    acn: varchar('acn'),
    website: varchar('website'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    company_settings_logo_idx: index('company_settings_logo_idx').on(columns.logo),
    company_settings_logo_darkmode_idx: index('company_settings_logo_darkmode_idx').on(
      columns.logoDarkmode,
    ),
    company_settings_favicon_idx: index('company_settings_favicon_idx').on(columns.favicon),
    company_settings_favicon_darkmode_idx: index('company_settings_favicon_darkmode_idx').on(
      columns.faviconDarkmode,
    ),
  }),
)

export const relations_pages_hero_links = relations(pages_hero_links, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_hero_links._parentID],
    references: [pages.id],
    relationName: 'hero_links',
  }),
}))
export const relations_pages_blocks_cta_links = relations(pages_blocks_cta_links, ({ one }) => ({
  _parentID: one(pages_blocks_cta, {
    fields: [pages_blocks_cta_links._parentID],
    references: [pages_blocks_cta.id],
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_cta = relations(pages_blocks_cta, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_cta._parentID],
    references: [pages.id],
    relationName: '_blocks_cta',
  }),
  links: many(pages_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_content_columns = relations(
  pages_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(pages_blocks_content, {
      fields: [pages_blocks_content_columns._parentID],
      references: [pages_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations_pages_blocks_content = relations(pages_blocks_content, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_content._parentID],
    references: [pages.id],
    relationName: '_blocks_content',
  }),
  columns: many(pages_blocks_content_columns, {
    relationName: 'columns',
  }),
}))
export const relations_pages_blocks_media_block = relations(
  pages_blocks_media_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_media_block._parentID],
      references: [pages.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [pages_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_archive = relations(pages_blocks_archive, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_archive._parentID],
    references: [pages.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations_pages_blocks_form_block = relations(pages_blocks_form_block, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_form_block._parentID],
    references: [pages.id],
    relationName: '_blocks_formBlock',
  }),
  form: one(forms, {
    fields: [pages_blocks_form_block.form],
    references: [forms.id],
    relationName: 'form',
  }),
}))
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [pages_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [pages_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [pages_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations_pages = relations(pages, ({ one, many }) => ({
  hero_links: many(pages_hero_links, {
    relationName: 'hero_links',
  }),
  hero_media: one(media, {
    fields: [pages.hero_media],
    references: [media.id],
    relationName: 'hero_media',
  }),
  _blocks_cta: many(pages_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(pages_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(pages_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(pages_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_formBlock: many(pages_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(pages_rels, {
    relationName: '_rels',
  }),
}))
export const relations__pages_v_version_hero_links = relations(
  _pages_v_version_hero_links,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_version_hero_links._parentID],
      references: [_pages_v.id],
      relationName: 'version_hero_links',
    }),
  }),
)
export const relations__pages_v_blocks_cta_links = relations(
  _pages_v_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_cta, {
      fields: [_pages_v_blocks_cta_links._parentID],
      references: [_pages_v_blocks_cta.id],
      relationName: 'links',
    }),
  }),
)
export const relations__pages_v_blocks_cta = relations(_pages_v_blocks_cta, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_cta._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_cta',
  }),
  links: many(_pages_v_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations__pages_v_blocks_content_columns = relations(
  _pages_v_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_content, {
      fields: [_pages_v_blocks_content_columns._parentID],
      references: [_pages_v_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_content = relations(
  _pages_v_blocks_content,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_content._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_content',
    }),
    columns: many(_pages_v_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_media_block = relations(
  _pages_v_blocks_media_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_media_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_archive = relations(_pages_v_blocks_archive, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_archive._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations__pages_v_blocks_form_block = relations(
  _pages_v_blocks_form_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_form_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_formBlock',
    }),
    form: one(forms, {
      fields: [_pages_v_blocks_form_block.form],
      references: [forms.id],
      relationName: 'form',
    }),
  }),
)
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [_pages_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [_pages_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [_pages_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  version_hero_links: many(_pages_v_version_hero_links, {
    relationName: 'version_hero_links',
  }),
  version_hero_media: one(media, {
    fields: [_pages_v.version_hero_media],
    references: [media.id],
    relationName: 'version_hero_media',
  }),
  _blocks_cta: many(_pages_v_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(_pages_v_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(_pages_v_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(_pages_v_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_formBlock: many(_pages_v_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  version_meta_image: one(media, {
    fields: [_pages_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_pages_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_posts_populated_authors = relations(posts_populated_authors, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_populated_authors._parentID],
    references: [posts.id],
    relationName: 'populatedAuthors',
  }),
}))
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [posts_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [posts_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [posts_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_posts = relations(posts, ({ one, many }) => ({
  heroImage: one(media, {
    fields: [posts.heroImage],
    references: [media.id],
    relationName: 'heroImage',
  }),
  meta_image: one(media, {
    fields: [posts.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(posts_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  _rels: many(posts_rels, {
    relationName: '_rels',
  }),
}))
export const relations__posts_v_version_populated_authors = relations(
  _posts_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_version_populated_authors._parentID],
      references: [_posts_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [_posts_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [_posts_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [_posts_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: 'parent',
  }),
  version_heroImage: one(media, {
    fields: [_posts_v.version_heroImage],
    references: [media.id],
    relationName: 'version_heroImage',
  }),
  version_meta_image: one(media, {
    fields: [_posts_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_posts_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  _rels: many(_posts_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_categories_breadcrumbs = relations(categories_breadcrumbs, ({ one }) => ({
  _parentID: one(categories, {
    fields: [categories_breadcrumbs._parentID],
    references: [categories.id],
    relationName: 'breadcrumbs',
  }),
  doc: one(categories, {
    fields: [categories_breadcrumbs.doc],
    references: [categories.id],
    relationName: 'doc',
  }),
}))
export const relations_categories = relations(categories, ({ one, many }) => ({
  parent: one(categories, {
    fields: [categories.parent],
    references: [categories.id],
    relationName: 'parent',
  }),
  breadcrumbs: many(categories_breadcrumbs, {
    relationName: 'breadcrumbs',
  }),
}))
export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_properties_info_agent_notes = relations(
  properties_info_agent_notes,
  ({ one }) => ({
    _parentID: one(properties, {
      fields: [properties_info_agent_notes._parentID],
      references: [properties.id],
      relationName: 'info_agentNotes',
    }),
  }),
)
export const relations_properties_info_sale_history = relations(
  properties_info_sale_history,
  ({ one }) => ({
    _parentID: one(properties, {
      fields: [properties_info_sale_history._parentID],
      references: [properties.id],
      relationName: 'info_saleHistory',
    }),
  }),
)
export const relations_properties_info_images = relations(properties_info_images, ({ one }) => ({
  _parentID: one(properties, {
    fields: [properties_info_images._parentID],
    references: [properties.id],
    relationName: 'info_images',
  }),
  image: one(media, {
    fields: [properties_info_images.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_properties_info_comparable_sales = relations(
  properties_info_comparable_sales,
  ({ one }) => ({
    _parentID: one(properties, {
      fields: [properties_info_comparable_sales._parentID],
      references: [properties.id],
      relationName: 'info_comparableSales',
    }),
    heroImage: one(media, {
      fields: [properties_info_comparable_sales.heroImage],
      references: [media.id],
      relationName: 'heroImage',
    }),
  }),
)
export const relations_properties_due_diligence_zone_data = relations(
  properties_due_diligence_zone_data,
  ({ one }) => ({
    _parentID: one(properties, {
      fields: [properties_due_diligence_zone_data._parentID],
      references: [properties.id],
      relationName: 'dueDiligence_zoneData',
    }),
    image: one(media, {
      fields: [properties_due_diligence_zone_data.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations_properties_rels = relations(properties_rels, ({ one }) => ({
  parent: one(properties, {
    fields: [properties_rels.parent],
    references: [properties.id],
    relationName: '_rels',
  }),
  'buyers-accessID': one(buyers_access, {
    fields: [properties_rels['buyers-accessID']],
    references: [buyers_access.id],
    relationName: 'buyers-access',
  }),
}))
export const relations_properties = relations(properties, ({ one, many }) => ({
  info_heroImage: one(media, {
    fields: [properties.info_heroImage],
    references: [media.id],
    relationName: 'info_heroImage',
  }),
  info_agentNotes: many(properties_info_agent_notes, {
    relationName: 'info_agentNotes',
  }),
  info_addr_suburbName: one(suburbs, {
    fields: [properties.info_addr_suburbName],
    references: [suburbs.id],
    relationName: 'info_addr_suburbName',
  }),
  info_addr_region: one(regions, {
    fields: [properties.info_addr_region],
    references: [regions.id],
    relationName: 'info_addr_region',
  }),
  info_saleHistory: many(properties_info_sale_history, {
    relationName: 'info_saleHistory',
  }),
  info_images: many(properties_info_images, {
    relationName: 'info_images',
  }),
  info_comparableSales: many(properties_info_comparable_sales, {
    relationName: 'info_comparableSales',
  }),
  dueDiligence_zoneData: many(properties_due_diligence_zone_data, {
    relationName: 'dueDiligence_zoneData',
  }),
  meta_image: one(media, {
    fields: [properties.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(properties_rels, {
    relationName: '_rels',
  }),
}))
export const relations__properties_v_version_info_agent_notes = relations(
  _properties_v_version_info_agent_notes,
  ({ one }) => ({
    _parentID: one(_properties_v, {
      fields: [_properties_v_version_info_agent_notes._parentID],
      references: [_properties_v.id],
      relationName: 'version_info_agentNotes',
    }),
  }),
)
export const relations__properties_v_version_info_sale_history = relations(
  _properties_v_version_info_sale_history,
  ({ one }) => ({
    _parentID: one(_properties_v, {
      fields: [_properties_v_version_info_sale_history._parentID],
      references: [_properties_v.id],
      relationName: 'version_info_saleHistory',
    }),
  }),
)
export const relations__properties_v_version_info_images = relations(
  _properties_v_version_info_images,
  ({ one }) => ({
    _parentID: one(_properties_v, {
      fields: [_properties_v_version_info_images._parentID],
      references: [_properties_v.id],
      relationName: 'version_info_images',
    }),
    image: one(media, {
      fields: [_properties_v_version_info_images.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__properties_v_version_info_comparable_sales = relations(
  _properties_v_version_info_comparable_sales,
  ({ one }) => ({
    _parentID: one(_properties_v, {
      fields: [_properties_v_version_info_comparable_sales._parentID],
      references: [_properties_v.id],
      relationName: 'version_info_comparableSales',
    }),
    heroImage: one(media, {
      fields: [_properties_v_version_info_comparable_sales.heroImage],
      references: [media.id],
      relationName: 'heroImage',
    }),
  }),
)
export const relations__properties_v_version_due_diligence_zone_data = relations(
  _properties_v_version_due_diligence_zone_data,
  ({ one }) => ({
    _parentID: one(_properties_v, {
      fields: [_properties_v_version_due_diligence_zone_data._parentID],
      references: [_properties_v.id],
      relationName: 'version_dueDiligence_zoneData',
    }),
    image: one(media, {
      fields: [_properties_v_version_due_diligence_zone_data.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__properties_v_rels = relations(_properties_v_rels, ({ one }) => ({
  parent: one(_properties_v, {
    fields: [_properties_v_rels.parent],
    references: [_properties_v.id],
    relationName: '_rels',
  }),
  'buyers-accessID': one(buyers_access, {
    fields: [_properties_v_rels['buyers-accessID']],
    references: [buyers_access.id],
    relationName: 'buyers-access',
  }),
}))
export const relations__properties_v = relations(_properties_v, ({ one, many }) => ({
  parent: one(properties, {
    fields: [_properties_v.parent],
    references: [properties.id],
    relationName: 'parent',
  }),
  version_info_heroImage: one(media, {
    fields: [_properties_v.version_info_heroImage],
    references: [media.id],
    relationName: 'version_info_heroImage',
  }),
  version_info_agentNotes: many(_properties_v_version_info_agent_notes, {
    relationName: 'version_info_agentNotes',
  }),
  version_info_addr_suburbName: one(suburbs, {
    fields: [_properties_v.version_info_addr_suburbName],
    references: [suburbs.id],
    relationName: 'version_info_addr_suburbName',
  }),
  version_info_addr_region: one(regions, {
    fields: [_properties_v.version_info_addr_region],
    references: [regions.id],
    relationName: 'version_info_addr_region',
  }),
  version_info_saleHistory: many(_properties_v_version_info_sale_history, {
    relationName: 'version_info_saleHistory',
  }),
  version_info_images: many(_properties_v_version_info_images, {
    relationName: 'version_info_images',
  }),
  version_info_comparableSales: many(_properties_v_version_info_comparable_sales, {
    relationName: 'version_info_comparableSales',
  }),
  version_dueDiligence_zoneData: many(_properties_v_version_due_diligence_zone_data, {
    relationName: 'version_dueDiligence_zoneData',
  }),
  version_meta_image: one(media, {
    fields: [_properties_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_properties_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_regions_community_economic_landscape = relations(
  regions_community_economic_landscape,
  ({ one }) => ({
    _parentID: one(regions, {
      fields: [regions_community_economic_landscape._parentID],
      references: [regions.id],
      relationName: 'communityEconomicLandscape',
    }),
    image: one(media, {
      fields: [regions_community_economic_landscape.image],
      references: [media.id],
      relationName: 'image',
    }),
    icon: one(media, {
      fields: [regions_community_economic_landscape.icon],
      references: [media.id],
      relationName: 'icon',
    }),
  }),
)
export const relations_regions_infrastructure_future_development = relations(
  regions_infrastructure_future_development,
  ({ one }) => ({
    _parentID: one(regions, {
      fields: [regions_infrastructure_future_development._parentID],
      references: [regions.id],
      relationName: 'infrastructureFutureDevelopment',
    }),
    image: one(media, {
      fields: [regions_infrastructure_future_development.image],
      references: [media.id],
      relationName: 'image',
    }),
    icon: one(media, {
      fields: [regions_infrastructure_future_development.icon],
      references: [media.id],
      relationName: 'icon',
    }),
  }),
)
export const relations_regions = relations(regions, ({ one, many }) => ({
  heroImage: one(media, {
    fields: [regions.heroImage],
    references: [media.id],
    relationName: 'heroImage',
  }),
  communityEconomicLandscape: many(regions_community_economic_landscape, {
    relationName: 'communityEconomicLandscape',
  }),
  infrastructureFutureDevelopment: many(regions_infrastructure_future_development, {
    relationName: 'infrastructureFutureDevelopment',
  }),
}))
export const relations__regions_v_version_community_economic_landscape = relations(
  _regions_v_version_community_economic_landscape,
  ({ one }) => ({
    _parentID: one(_regions_v, {
      fields: [_regions_v_version_community_economic_landscape._parentID],
      references: [_regions_v.id],
      relationName: 'version_communityEconomicLandscape',
    }),
    image: one(media, {
      fields: [_regions_v_version_community_economic_landscape.image],
      references: [media.id],
      relationName: 'image',
    }),
    icon: one(media, {
      fields: [_regions_v_version_community_economic_landscape.icon],
      references: [media.id],
      relationName: 'icon',
    }),
  }),
)
export const relations__regions_v_version_infrastructure_future_development = relations(
  _regions_v_version_infrastructure_future_development,
  ({ one }) => ({
    _parentID: one(_regions_v, {
      fields: [_regions_v_version_infrastructure_future_development._parentID],
      references: [_regions_v.id],
      relationName: 'version_infrastructureFutureDevelopment',
    }),
    image: one(media, {
      fields: [_regions_v_version_infrastructure_future_development.image],
      references: [media.id],
      relationName: 'image',
    }),
    icon: one(media, {
      fields: [_regions_v_version_infrastructure_future_development.icon],
      references: [media.id],
      relationName: 'icon',
    }),
  }),
)
export const relations__regions_v = relations(_regions_v, ({ one, many }) => ({
  parent: one(regions, {
    fields: [_regions_v.parent],
    references: [regions.id],
    relationName: 'parent',
  }),
  version_heroImage: one(media, {
    fields: [_regions_v.version_heroImage],
    references: [media.id],
    relationName: 'version_heroImage',
  }),
  version_communityEconomicLandscape: many(_regions_v_version_community_economic_landscape, {
    relationName: 'version_communityEconomicLandscape',
  }),
  version_infrastructureFutureDevelopment: many(
    _regions_v_version_infrastructure_future_development,
    {
      relationName: 'version_infrastructureFutureDevelopment',
    },
  ),
}))
export const relations_suburbs_median_value_by_year = relations(
  suburbs_median_value_by_year,
  ({ one }) => ({
    _parentID: one(suburbs, {
      fields: [suburbs_median_value_by_year._parentID],
      references: [suburbs.id],
      relationName: 'medianValueByYear',
    }),
  }),
)
export const relations_suburbs = relations(suburbs, ({ one, many }) => ({
  region: one(regions, {
    fields: [suburbs.region],
    references: [regions.id],
    relationName: 'region',
  }),
  heroImage: one(media, {
    fields: [suburbs.heroImage],
    references: [media.id],
    relationName: 'heroImage',
  }),
  medianValueByYear: many(suburbs_median_value_by_year, {
    relationName: 'medianValueByYear',
  }),
}))
export const relations__suburbs_v_version_median_value_by_year = relations(
  _suburbs_v_version_median_value_by_year,
  ({ one }) => ({
    _parentID: one(_suburbs_v, {
      fields: [_suburbs_v_version_median_value_by_year._parentID],
      references: [_suburbs_v.id],
      relationName: 'version_medianValueByYear',
    }),
  }),
)
export const relations__suburbs_v = relations(_suburbs_v, ({ one, many }) => ({
  parent: one(suburbs, {
    fields: [_suburbs_v.parent],
    references: [suburbs.id],
    relationName: 'parent',
  }),
  version_region: one(regions, {
    fields: [_suburbs_v.version_region],
    references: [regions.id],
    relationName: 'version_region',
  }),
  version_heroImage: one(media, {
    fields: [_suburbs_v.version_heroImage],
    references: [media.id],
    relationName: 'version_heroImage',
  }),
  version_medianValueByYear: many(_suburbs_v_version_median_value_by_year, {
    relationName: 'version_medianValueByYear',
  }),
}))
export const relations_access_token = relations(access_token, () => ({}))
export const relations_buyers_access_sessions = relations(buyers_access_sessions, ({ one }) => ({
  _parentID: one(buyers_access, {
    fields: [buyers_access_sessions._parentID],
    references: [buyers_access.id],
    relationName: 'sessions',
  }),
}))
export const relations_buyers_access_rels = relations(buyers_access_rels, ({ one }) => ({
  parent: one(buyers_access, {
    fields: [buyers_access_rels.parent],
    references: [buyers_access.id],
    relationName: '_rels',
  }),
  propertiesID: one(properties, {
    fields: [buyers_access_rels.propertiesID],
    references: [properties.id],
    relationName: 'properties',
  }),
}))
export const relations_buyers_access = relations(buyers_access, ({ many }) => ({
  sessions: many(buyers_access_sessions, {
    relationName: 'sessions',
  }),
  _rels: many(buyers_access_rels, {
    relationName: '_rels',
  }),
}))
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [redirects_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [redirects_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}))
export const relations_forms_blocks_checkbox = relations(forms_blocks_checkbox, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_checkbox._parentID],
    references: [forms.id],
    relationName: '_blocks_checkbox',
  }),
}))
export const relations_forms_blocks_country = relations(forms_blocks_country, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_country._parentID],
    references: [forms.id],
    relationName: '_blocks_country',
  }),
}))
export const relations_forms_blocks_email = relations(forms_blocks_email, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_email._parentID],
    references: [forms.id],
    relationName: '_blocks_email',
  }),
}))
export const relations_forms_blocks_message = relations(forms_blocks_message, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_message._parentID],
    references: [forms.id],
    relationName: '_blocks_message',
  }),
}))
export const relations_forms_blocks_number = relations(forms_blocks_number, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_number._parentID],
    references: [forms.id],
    relationName: '_blocks_number',
  }),
}))
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: 'options',
    }),
  }),
)
export const relations_forms_blocks_select = relations(forms_blocks_select, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_select._parentID],
    references: [forms.id],
    relationName: '_blocks_select',
  }),
  options: many(forms_blocks_select_options, {
    relationName: 'options',
  }),
}))
export const relations_forms_blocks_state = relations(forms_blocks_state, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_state._parentID],
    references: [forms.id],
    relationName: '_blocks_state',
  }),
}))
export const relations_forms_blocks_text = relations(forms_blocks_text, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_text._parentID],
    references: [forms.id],
    relationName: '_blocks_text',
  }),
}))
export const relations_forms_blocks_textarea = relations(forms_blocks_textarea, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_textarea._parentID],
    references: [forms.id],
    relationName: '_blocks_textarea',
  }),
}))
export const relations_forms_emails = relations(forms_emails, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: 'emails',
  }),
}))
export const relations_forms = relations(forms, ({ many }) => ({
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: '_blocks_checkbox',
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: '_blocks_country',
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: '_blocks_email',
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: '_blocks_message',
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: '_blocks_number',
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: '_blocks_select',
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: '_blocks_state',
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: '_blocks_textarea',
  }),
  emails: many(forms_emails, {
    relationName: 'emails',
  }),
}))
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: 'submissionData',
    }),
  }),
)
export const relations_form_submissions = relations(form_submissions, ({ one, many }) => ({
  form: one(forms, {
    fields: [form_submissions.form],
    references: [forms.id],
    relationName: 'form',
  }),
  submissionData: many(form_submissions_submission_data, {
    relationName: 'submissionData',
  }),
}))
export const relations_search_categories = relations(search_categories, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_categories._parentID],
    references: [search.id],
    relationName: 'categories',
  }),
}))
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [search_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_search = relations(search, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [search.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  categories: many(search_categories, {
    relationName: 'categories',
  }),
  _rels: many(search_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_jobs_log = relations(payload_jobs_log, ({ one }) => ({
  _parentID: one(payload_jobs, {
    fields: [payload_jobs_log._parentID],
    references: [payload_jobs.id],
    relationName: 'log',
  }),
}))
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: 'log',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: 'categories',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    propertiesID: one(properties, {
      fields: [payload_locked_documents_rels.propertiesID],
      references: [properties.id],
      relationName: 'properties',
    }),
    regionsID: one(regions, {
      fields: [payload_locked_documents_rels.regionsID],
      references: [regions.id],
      relationName: 'regions',
    }),
    suburbsID: one(suburbs, {
      fields: [payload_locked_documents_rels.suburbsID],
      references: [suburbs.id],
      relationName: 'suburbs',
    }),
    'access-tokenID': one(access_token, {
      fields: [payload_locked_documents_rels['access-tokenID']],
      references: [access_token.id],
      relationName: 'access-token',
    }),
    'buyers-accessID': one(buyers_access, {
      fields: [payload_locked_documents_rels['buyers-accessID']],
      references: [buyers_access.id],
      relationName: 'buyers-access',
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: 'redirects',
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: 'forms',
    }),
    'form-submissionsID': one(form_submissions, {
      fields: [payload_locked_documents_rels['form-submissionsID']],
      references: [form_submissions.id],
      relationName: 'form-submissions',
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: 'search',
    }),
    'payload-jobsID': one(payload_jobs, {
      fields: [payload_locked_documents_rels['payload-jobsID']],
      references: [payload_jobs.id],
      relationName: 'payload-jobs',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    'access-tokenID': one(access_token, {
      fields: [payload_preferences_rels['access-tokenID']],
      references: [access_token.id],
      relationName: 'access-token',
    }),
    'buyers-accessID': one(buyers_access, {
      fields: [payload_preferences_rels['buyers-accessID']],
      references: [buyers_access.id],
      relationName: 'buyers-access',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_header_nav_items = relations(header_nav_items, ({ one }) => ({
  _parentID: one(header, {
    fields: [header_nav_items._parentID],
    references: [header.id],
    relationName: 'navItems',
  }),
}))
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [header_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [header_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_header = relations(header, ({ many }) => ({
  navItems: many(header_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(header_rels, {
    relationName: '_rels',
  }),
}))
export const relations_footer_nav_items = relations(footer_nav_items, ({ one }) => ({
  _parentID: one(footer, {
    fields: [footer_nav_items._parentID],
    references: [footer.id],
    relationName: 'navItems',
  }),
}))
export const relations_footer_rels = relations(footer_rels, ({ one }) => ({
  parent: one(footer, {
    fields: [footer_rels.parent],
    references: [footer.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [footer_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [footer_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_footer = relations(footer, ({ many }) => ({
  navItems: many(footer_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(footer_rels, {
    relationName: '_rels',
  }),
}))
export const relations_company_settings_social_media = relations(
  company_settings_social_media,
  ({ one }) => ({
    _parentID: one(company_settings, {
      fields: [company_settings_social_media._parentID],
      references: [company_settings.id],
      relationName: 'socialMedia',
    }),
    icon: one(media, {
      fields: [company_settings_social_media.icon],
      references: [media.id],
      relationName: 'icon',
    }),
  }),
)
export const relations_company_settings_brand_colours = relations(
  company_settings_brand_colours,
  ({ one }) => ({
    _parentID: one(company_settings, {
      fields: [company_settings_brand_colours._parentID],
      references: [company_settings.id],
      relationName: 'brandColours',
    }),
  }),
)
export const relations_company_settings = relations(company_settings, ({ one, many }) => ({
  logo: one(media, {
    fields: [company_settings.logo],
    references: [media.id],
    relationName: 'logo',
  }),
  logoDarkmode: one(media, {
    fields: [company_settings.logoDarkmode],
    references: [media.id],
    relationName: 'logoDarkmode',
  }),
  favicon: one(media, {
    fields: [company_settings.favicon],
    references: [media.id],
    relationName: 'favicon',
  }),
  faviconDarkmode: one(media, {
    fields: [company_settings.faviconDarkmode],
    references: [media.id],
    relationName: 'faviconDarkmode',
  }),
  socialMedia: many(company_settings_social_media, {
    relationName: 'socialMedia',
  }),
  brandColours: many(company_settings_brand_colours, {
    relationName: 'brandColours',
  }),
}))

type DatabaseSchema = {
  enum_pages_hero_links_link_type: typeof enum_pages_hero_links_link_type
  enum_pages_hero_links_link_appearance: typeof enum_pages_hero_links_link_appearance
  enum_pages_blocks_cta_links_link_type: typeof enum_pages_blocks_cta_links_link_type
  enum_pages_blocks_cta_links_link_appearance: typeof enum_pages_blocks_cta_links_link_appearance
  enum_pages_blocks_content_columns_size: typeof enum_pages_blocks_content_columns_size
  enum_pages_blocks_content_columns_link_type: typeof enum_pages_blocks_content_columns_link_type
  enum_pages_blocks_content_columns_link_appearance: typeof enum_pages_blocks_content_columns_link_appearance
  enum_pages_blocks_archive_populate_by: typeof enum_pages_blocks_archive_populate_by
  enum_pages_blocks_archive_relation_to: typeof enum_pages_blocks_archive_relation_to
  enum_pages_hero_type: typeof enum_pages_hero_type
  enum_pages_status: typeof enum_pages_status
  enum__pages_v_version_hero_links_link_type: typeof enum__pages_v_version_hero_links_link_type
  enum__pages_v_version_hero_links_link_appearance: typeof enum__pages_v_version_hero_links_link_appearance
  enum__pages_v_blocks_cta_links_link_type: typeof enum__pages_v_blocks_cta_links_link_type
  enum__pages_v_blocks_cta_links_link_appearance: typeof enum__pages_v_blocks_cta_links_link_appearance
  enum__pages_v_blocks_content_columns_size: typeof enum__pages_v_blocks_content_columns_size
  enum__pages_v_blocks_content_columns_link_type: typeof enum__pages_v_blocks_content_columns_link_type
  enum__pages_v_blocks_content_columns_link_appearance: typeof enum__pages_v_blocks_content_columns_link_appearance
  enum__pages_v_blocks_archive_populate_by: typeof enum__pages_v_blocks_archive_populate_by
  enum__pages_v_blocks_archive_relation_to: typeof enum__pages_v_blocks_archive_relation_to
  enum__pages_v_version_hero_type: typeof enum__pages_v_version_hero_type
  enum__pages_v_version_status: typeof enum__pages_v_version_status
  enum_posts_status: typeof enum_posts_status
  enum__posts_v_version_status: typeof enum__posts_v_version_status
  enum_properties_info_comparable_sales_comparison: typeof enum_properties_info_comparable_sales_comparison
  enum_properties_due_diligence_zone_data_type: typeof enum_properties_due_diligence_zone_data_type
  enum_properties_due_diligence_zone_data_effected: typeof enum_properties_due_diligence_zone_data_effected
  enum_properties_info_addr_state: typeof enum_properties_info_addr_state
  enum_properties_due_diligence_property_occupancy: typeof enum_properties_due_diligence_property_occupancy
  enum_properties_status: typeof enum_properties_status
  enum__properties_v_version_info_comparable_sales_comparison: typeof enum__properties_v_version_info_comparable_sales_comparison
  enum__properties_v_version_due_diligence_zone_data_type: typeof enum__properties_v_version_due_diligence_zone_data_type
  enum__properties_v_version_due_diligence_zone_data_effected: typeof enum__properties_v_version_due_diligence_zone_data_effected
  enum__properties_v_version_info_addr_state: typeof enum__properties_v_version_info_addr_state
  enum__properties_v_version_due_diligence_property_occupancy: typeof enum__properties_v_version_due_diligence_property_occupancy
  enum__properties_v_version_status: typeof enum__properties_v_version_status
  enum_regions_status: typeof enum_regions_status
  enum__regions_v_version_status: typeof enum__regions_v_version_status
  enum_suburbs_status: typeof enum_suburbs_status
  enum__suburbs_v_version_status: typeof enum__suburbs_v_version_status
  enum_redirects_to_type: typeof enum_redirects_to_type
  enum_forms_confirmation_type: typeof enum_forms_confirmation_type
  enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug
  enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state
  enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug
  enum_header_nav_items_link_type: typeof enum_header_nav_items_link_type
  enum_footer_nav_items_link_type: typeof enum_footer_nav_items_link_type
  pages_hero_links: typeof pages_hero_links
  pages_blocks_cta_links: typeof pages_blocks_cta_links
  pages_blocks_cta: typeof pages_blocks_cta
  pages_blocks_content_columns: typeof pages_blocks_content_columns
  pages_blocks_content: typeof pages_blocks_content
  pages_blocks_media_block: typeof pages_blocks_media_block
  pages_blocks_archive: typeof pages_blocks_archive
  pages_blocks_form_block: typeof pages_blocks_form_block
  pages: typeof pages
  pages_rels: typeof pages_rels
  _pages_v_version_hero_links: typeof _pages_v_version_hero_links
  _pages_v_blocks_cta_links: typeof _pages_v_blocks_cta_links
  _pages_v_blocks_cta: typeof _pages_v_blocks_cta
  _pages_v_blocks_content_columns: typeof _pages_v_blocks_content_columns
  _pages_v_blocks_content: typeof _pages_v_blocks_content
  _pages_v_blocks_media_block: typeof _pages_v_blocks_media_block
  _pages_v_blocks_archive: typeof _pages_v_blocks_archive
  _pages_v_blocks_form_block: typeof _pages_v_blocks_form_block
  _pages_v: typeof _pages_v
  _pages_v_rels: typeof _pages_v_rels
  posts_populated_authors: typeof posts_populated_authors
  posts: typeof posts
  posts_rels: typeof posts_rels
  _posts_v_version_populated_authors: typeof _posts_v_version_populated_authors
  _posts_v: typeof _posts_v
  _posts_v_rels: typeof _posts_v_rels
  media: typeof media
  categories_breadcrumbs: typeof categories_breadcrumbs
  categories: typeof categories
  users_sessions: typeof users_sessions
  users: typeof users
  properties_info_agent_notes: typeof properties_info_agent_notes
  properties_info_sale_history: typeof properties_info_sale_history
  properties_info_images: typeof properties_info_images
  properties_info_comparable_sales: typeof properties_info_comparable_sales
  properties_due_diligence_zone_data: typeof properties_due_diligence_zone_data
  properties: typeof properties
  properties_rels: typeof properties_rels
  _properties_v_version_info_agent_notes: typeof _properties_v_version_info_agent_notes
  _properties_v_version_info_sale_history: typeof _properties_v_version_info_sale_history
  _properties_v_version_info_images: typeof _properties_v_version_info_images
  _properties_v_version_info_comparable_sales: typeof _properties_v_version_info_comparable_sales
  _properties_v_version_due_diligence_zone_data: typeof _properties_v_version_due_diligence_zone_data
  _properties_v: typeof _properties_v
  _properties_v_rels: typeof _properties_v_rels
  regions_community_economic_landscape: typeof regions_community_economic_landscape
  regions_infrastructure_future_development: typeof regions_infrastructure_future_development
  regions: typeof regions
  _regions_v_version_community_economic_landscape: typeof _regions_v_version_community_economic_landscape
  _regions_v_version_infrastructure_future_development: typeof _regions_v_version_infrastructure_future_development
  _regions_v: typeof _regions_v
  suburbs_median_value_by_year: typeof suburbs_median_value_by_year
  suburbs: typeof suburbs
  _suburbs_v_version_median_value_by_year: typeof _suburbs_v_version_median_value_by_year
  _suburbs_v: typeof _suburbs_v
  access_token: typeof access_token
  buyers_access_sessions: typeof buyers_access_sessions
  buyers_access: typeof buyers_access
  buyers_access_rels: typeof buyers_access_rels
  redirects: typeof redirects
  redirects_rels: typeof redirects_rels
  forms_blocks_checkbox: typeof forms_blocks_checkbox
  forms_blocks_country: typeof forms_blocks_country
  forms_blocks_email: typeof forms_blocks_email
  forms_blocks_message: typeof forms_blocks_message
  forms_blocks_number: typeof forms_blocks_number
  forms_blocks_select_options: typeof forms_blocks_select_options
  forms_blocks_select: typeof forms_blocks_select
  forms_blocks_state: typeof forms_blocks_state
  forms_blocks_text: typeof forms_blocks_text
  forms_blocks_textarea: typeof forms_blocks_textarea
  forms_emails: typeof forms_emails
  forms: typeof forms
  form_submissions_submission_data: typeof form_submissions_submission_data
  form_submissions: typeof form_submissions
  search_categories: typeof search_categories
  search: typeof search
  search_rels: typeof search_rels
  payload_jobs_log: typeof payload_jobs_log
  payload_jobs: typeof payload_jobs
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  header_nav_items: typeof header_nav_items
  header: typeof header
  header_rels: typeof header_rels
  footer_nav_items: typeof footer_nav_items
  footer: typeof footer
  footer_rels: typeof footer_rels
  company_settings_social_media: typeof company_settings_social_media
  company_settings_brand_colours: typeof company_settings_brand_colours
  company_settings: typeof company_settings
  relations_pages_hero_links: typeof relations_pages_hero_links
  relations_pages_blocks_cta_links: typeof relations_pages_blocks_cta_links
  relations_pages_blocks_cta: typeof relations_pages_blocks_cta
  relations_pages_blocks_content_columns: typeof relations_pages_blocks_content_columns
  relations_pages_blocks_content: typeof relations_pages_blocks_content
  relations_pages_blocks_media_block: typeof relations_pages_blocks_media_block
  relations_pages_blocks_archive: typeof relations_pages_blocks_archive
  relations_pages_blocks_form_block: typeof relations_pages_blocks_form_block
  relations_pages_rels: typeof relations_pages_rels
  relations_pages: typeof relations_pages
  relations__pages_v_version_hero_links: typeof relations__pages_v_version_hero_links
  relations__pages_v_blocks_cta_links: typeof relations__pages_v_blocks_cta_links
  relations__pages_v_blocks_cta: typeof relations__pages_v_blocks_cta
  relations__pages_v_blocks_content_columns: typeof relations__pages_v_blocks_content_columns
  relations__pages_v_blocks_content: typeof relations__pages_v_blocks_content
  relations__pages_v_blocks_media_block: typeof relations__pages_v_blocks_media_block
  relations__pages_v_blocks_archive: typeof relations__pages_v_blocks_archive
  relations__pages_v_blocks_form_block: typeof relations__pages_v_blocks_form_block
  relations__pages_v_rels: typeof relations__pages_v_rels
  relations__pages_v: typeof relations__pages_v
  relations_posts_populated_authors: typeof relations_posts_populated_authors
  relations_posts_rels: typeof relations_posts_rels
  relations_posts: typeof relations_posts
  relations__posts_v_version_populated_authors: typeof relations__posts_v_version_populated_authors
  relations__posts_v_rels: typeof relations__posts_v_rels
  relations__posts_v: typeof relations__posts_v
  relations_media: typeof relations_media
  relations_categories_breadcrumbs: typeof relations_categories_breadcrumbs
  relations_categories: typeof relations_categories
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_properties_info_agent_notes: typeof relations_properties_info_agent_notes
  relations_properties_info_sale_history: typeof relations_properties_info_sale_history
  relations_properties_info_images: typeof relations_properties_info_images
  relations_properties_info_comparable_sales: typeof relations_properties_info_comparable_sales
  relations_properties_due_diligence_zone_data: typeof relations_properties_due_diligence_zone_data
  relations_properties_rels: typeof relations_properties_rels
  relations_properties: typeof relations_properties
  relations__properties_v_version_info_agent_notes: typeof relations__properties_v_version_info_agent_notes
  relations__properties_v_version_info_sale_history: typeof relations__properties_v_version_info_sale_history
  relations__properties_v_version_info_images: typeof relations__properties_v_version_info_images
  relations__properties_v_version_info_comparable_sales: typeof relations__properties_v_version_info_comparable_sales
  relations__properties_v_version_due_diligence_zone_data: typeof relations__properties_v_version_due_diligence_zone_data
  relations__properties_v_rels: typeof relations__properties_v_rels
  relations__properties_v: typeof relations__properties_v
  relations_regions_community_economic_landscape: typeof relations_regions_community_economic_landscape
  relations_regions_infrastructure_future_development: typeof relations_regions_infrastructure_future_development
  relations_regions: typeof relations_regions
  relations__regions_v_version_community_economic_landscape: typeof relations__regions_v_version_community_economic_landscape
  relations__regions_v_version_infrastructure_future_development: typeof relations__regions_v_version_infrastructure_future_development
  relations__regions_v: typeof relations__regions_v
  relations_suburbs_median_value_by_year: typeof relations_suburbs_median_value_by_year
  relations_suburbs: typeof relations_suburbs
  relations__suburbs_v_version_median_value_by_year: typeof relations__suburbs_v_version_median_value_by_year
  relations__suburbs_v: typeof relations__suburbs_v
  relations_access_token: typeof relations_access_token
  relations_buyers_access_sessions: typeof relations_buyers_access_sessions
  relations_buyers_access_rels: typeof relations_buyers_access_rels
  relations_buyers_access: typeof relations_buyers_access
  relations_redirects_rels: typeof relations_redirects_rels
  relations_redirects: typeof relations_redirects
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox
  relations_forms_blocks_country: typeof relations_forms_blocks_country
  relations_forms_blocks_email: typeof relations_forms_blocks_email
  relations_forms_blocks_message: typeof relations_forms_blocks_message
  relations_forms_blocks_number: typeof relations_forms_blocks_number
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options
  relations_forms_blocks_select: typeof relations_forms_blocks_select
  relations_forms_blocks_state: typeof relations_forms_blocks_state
  relations_forms_blocks_text: typeof relations_forms_blocks_text
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea
  relations_forms_emails: typeof relations_forms_emails
  relations_forms: typeof relations_forms
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data
  relations_form_submissions: typeof relations_form_submissions
  relations_search_categories: typeof relations_search_categories
  relations_search_rels: typeof relations_search_rels
  relations_search: typeof relations_search
  relations_payload_jobs_log: typeof relations_payload_jobs_log
  relations_payload_jobs: typeof relations_payload_jobs
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_header_nav_items: typeof relations_header_nav_items
  relations_header_rels: typeof relations_header_rels
  relations_header: typeof relations_header
  relations_footer_nav_items: typeof relations_footer_nav_items
  relations_footer_rels: typeof relations_footer_rels
  relations_footer: typeof relations_footer
  relations_company_settings_social_media: typeof relations_company_settings_social_media
  relations_company_settings_brand_colours: typeof relations_company_settings_brand_colours
  relations_company_settings: typeof relations_company_settings
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
